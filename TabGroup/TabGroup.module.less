// TabGroup.module.less
@import "../styles/mixins.less";
@import "../styles/variables.less";
@import "../styles/skin.less";

.tabBar {
	.applySkins({
		margin: @agate-panels-tab-bar-margin;
		background-color: @agate-panels-tab-bg-color;
		background-image: @agate-panels-tab-bg-image;

		.tabGroup {
			margin: @agate-panels-tab-group-margin;
			padding: @agate-panels-tab-group-padding;
			border-radius: @agate-panels-tab-group-border-radius;
			overflow: hidden;
			transform: @agate-panels-tab-group-transform;

			.tab {
				color: @agate-panels-tab-color;
				// background-color: @agate-panels-tab-bg-color;
				// background-image: @agate-panels-tab-bg-image;

				&::before {
					.position(@agate-panels-tab-bg-position);
					position: absolute;
					content: "";
					display: block;
					border-radius: @agate-panels-tab-border-radius;
					transform: @agate-panels-tab-bg-transform;
				}

				.labeledIcon {
					margin: @agate-panels-tab-margin;
					.padding-start-end(@agate-panels-tab-padding);
				}

				.focus({
					color: @agate-panels-tab-focus-color;
					background-color: transparent;
					background-image: none;

					&::before {
						background-color: @agate-panels-tab-focus-bg-color;
						background-image: @agate-panels-tab-focus-bg-image;
					}
				});

				&.selected {
					&::before {
						background-color: @agate-panels-tab-selected-bg-color;
						background-image: @agate-panels-tab-selected-bg-image;
					}

					.labeledIcon {
						color: @agate-panels-tab-selected-color;
					}

					.focus({
						color: @agate-panels-tab-selected-color;

						&::before {
							background-color: @agate-panels-tab-selected-bg-color;
							background-image: @agate-panels-tab-selected-bg-image;
						}
					});
				}
			}
		}

		&.positionAfter {
			.tabGroup {
				.margin-start-end(@agate-panels-tab-group-position-after-margin);
			}

			// The below code is to handle the vertical (perpendicular) alignment of the components
			// on the ends of the tab row, commented out here to remind us to come back later and
			// populate these with theme-settable variable values when the time comes. We'll need to
			// support positionBefore and positionAfter as well.
			// .tabEnds {
			// 	display: flex;
			// 	align-items: flex-end;
			// }
		}

		&.horizontal {
			.tabGroup {
				.tab {
					border-left: @agate-panels-tab-separator-border-width solid @agate-panels-tab-separator-border-color;

					&:first-child {
						border-left-width: 0;
					}
				}

				&,
				.labeledIcon {
					height: 100%;
				}
			}
		}

		&.vertical {
			.tabGroup {
				margin: @agate-panels-vertical-tab-group-margin;
				.padding-start-end(@agate-panels-vertical-tab-group-padding);
				transform: @agate-panels-tab-group-horizontal-transform;

				.tab {
					border-bottom: @agate-panels-tab-separator-border-width solid @agate-panels-tab-separator-border-color;
					.margin-start-end(@agate-panels-vertical-tab-margin);

					&:last-child {
						border-bottom-width: 0;
					}

					&::before {
						.position(@agate-panels-vertical-tab-bg-position);
					}
				}
			}

			&.positionAfter {
				// .tabEnds {
				// 	display: flex;
				// 	justify-content: flex-end;
				// }

				.tab {
					right: 0;
					padding-right: @agate-panels-vertical-tab-after-padding-right;
				}
			}
		}
	});
}
