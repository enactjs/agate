// skin.less
//

.applySkins(@componentRules) when (isruleset(@componentRules)) {

	.buildSkinRules(@skin; @importRules) {
		&:global(.@{skin}) {
			// Establish a base set of colors and variables that other skins can optionally override.
			@import "./colors-base.less";
			@import "./variables-base.less";

			@importRules();
		}
	}

	//
	// Start assigning skin values
	//
	// https://github.com/less/less.js/issues/2772
	.buildSkinRules(carbon; {
		@import (multiple) "./colors-carbon.less";
		@import (multiple) "./variables-carbon.less";
		// Load the skin rules into this scope
		@componentRules();
	});
	.buildSkinRules(cobalt; {
		@import (multiple) "./variables-cobalt.less";

		@import (multiple) "./colors-cobalt-day.less";
		@componentRules();

		.buildSkinRules(night; {
			@import (multiple) "./colors-cobalt.less";
			@componentRules();
		});
	});
	.buildSkinRules(copper; {
		@import (multiple) "./variables-copper.less";

		@import (multiple) "./colors-copper-day.less";
		@componentRules();

		.buildSkinRules(night; {
			@import (multiple) "./colors-copper.less";
			@componentRules();
		});
	});
	.buildSkinRules(electro; {
		@import (multiple) "./colors-electro.less";
		@import (multiple) "./variables-electro.less";
		@componentRules();
	});
	.buildSkinRules(gallium; {
		@import (multiple) "./variables-gallium.less";

		@import (multiple) "./colors-gallium-day.less";
		@componentRules();

		.buildSkinRules(night; {
			@import (multiple) "./colors-gallium-night.less";
			@componentRules();
		});
	});
	.buildSkinRules(silicon; {
		@import (multiple) "./variables-silicon.less";

		@import (multiple) "./colors-silicon-day.less";
		@componentRules();

		.buildSkinRules(night; {
			@import (multiple) "./colors-silicon-night.less";
			@componentRules();
		});
	});
	.buildSkinRules(titanium; {
		@import (multiple) "./colors-titanium.less";
		@import (multiple) "./variables-titanium.less";
		@componentRules();
	});
}
