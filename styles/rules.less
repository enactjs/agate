//
// Rules
//

@import "./fonts.less";
@import "./mixins.less";
@import "./skin.less";

/* Prevent browser's default focus treatment (at least in Chrome) */
:focus {
	outline: none;
}
.applySkins({

	::selection {
		color: @agate-spotlight-color;
		background-color: lighten(@agate-spotlight-bg-color, 18%);
	}

	// Spotlight
	// This rule-set applies a generic spottable set of colors to anything with the spottable class
	// that is a child of a skin. It's a blanket rule for components that don't technically need to
	// be skinnable themselves, but still need to be focusable and inherit rules from their parent.
	// The rule below this, should look identical, with the exception of the absence of the `parent`
	// argument to the focus mixin. This allows that set of rules to prevail over this generic set.
	//// Inherited Spottable rules (for components that aren't directly skinned)
	.focus({
		color: @agate-spotlight-color;
		background-color: @agate-spotlight-bg-color;
		background-image: @agate-spotlight-focus-bg-image;
	}, parent);
	//// Primary spottable rules (for any component with a skin applied to itself)
	.focus({
		color: @agate-spotlight-color;
		background-color: @agate-spotlight-bg-color;
		background-image: @agate-spotlight-focus-bg-image;
	});

	// Disabled Components
	.disabled({
		.vendor-opacity(@agate-disabled-opacity);

		// Focused and disabled, must restore their natural opacity, then assign the faded text/content color
		.focus({
			.vendor-opacity(1);
			color: @agate-spotlight-disabled-text-color;
		});

		cursor: default;

		// Disabled children of disabled components
		.disabled({
			.vendor-opacity(1);
		}, parent);
	});
});
